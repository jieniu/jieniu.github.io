(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{388:function(t,e,v){"use strict";v.r(e);var n=v(45),_=Object(n.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"编译器产生的默认成员函数-compiler-generated-functions"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编译器产生的默认成员函数-compiler-generated-functions"}},[t._v("#")]),t._v(" 编译器产生的默认成员函数（Compiler Generated Functions）")]),t._v(" "),v("p",[t._v("在 C++03 中，定义以下类，")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("class Dog {};\n")])])]),v("p",[t._v("编译器会给你产生 4 个默认的成员函数：")]),t._v(" "),v("ol",[v("li",[t._v("复制构造函数（Copy constructor）")]),t._v(" "),v("li",[t._v("赋值操作符（Copy Assignment Operator）")]),t._v(" "),v("li",[t._v("析构函数（Destructor）")]),t._v(" "),v("li",[t._v("默认构造函数（Default constructor），注意："),v("strong",[t._v("默认构造函数只有在你没有声明任何构造函数的情况下才产生")])])]),t._v(" "),v("p",[t._v("上面的代码和下面的代码等价")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Class Dog {\npublic:\n\tDog(const Dog& rhs) {...}; \t\t\t\t// 挨个成员初始化\n\tDog& operator=(const Dog& rhs) {...}; \t // 挨个成员拷贝\n\tDog() {...}; \t\t// 1. 调用基类的构造函数\n\t\t\t\t\t   // 2. 调用成员的默认构造函数\n\t~Dog() {...}; \t    // 1. 调用基类的析构函数;\n\t\t\t\t \t   // 2. 调用成员的析构函数;\n};\n")])])]),v("p",[t._v("以上代码产生时，有两点需要注意")]),t._v(" "),v("ol",[v("li",[t._v("编译器产生的默认函数都是 "),v("code",[t._v("public")]),t._v("、 "),v("code",[t._v("inline")]),t._v(" 的")]),t._v(" "),v("li",[t._v("只有在需要的时候，编译器才会产生它们")])]),t._v(" "),v("p",[t._v("上面提到了默认构造函数这个概念，我们先来回顾一下，什么是默认构造函数，它的特征是"),v("strong",[t._v("默认构造函数可以在没有任何参数的情况下使用")]),t._v("，这里有个例子需要记一下：如果构造函数的所有参数都有默认参数，那么这个构造函数也可以作为默认构造函数使用。")]),t._v(" "),v("p",[t._v("C++ 中的容器是经常被用到的模板类库，"),v("strong",[t._v("使用容器的类需要具备两个条件：支持复制操作和赋值构造")]),t._v("，即它应包含复制操作符和赋值构造函数，而如果类中又包含引用类型的成员，或 "),v("code",[t._v("const")]),t._v(" 成员，由于这些成员无法被复制，所以这些类对象无法使用容器。")]),t._v(" "),v("p",[t._v("既然是规则，那一定有它无法生效的情况：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("什么情况下编译器无法创建默认构造函数？")]),t._v(" "),v("p",[t._v("如果类定义了构造函数，且该构造函数带参（不是默认构造函数）；如果成员或基类无法创建默认构造函数，或没有默认构造函数。")])]),t._v(" "),v("li",[v("p",[t._v("什么情况下编译器无法创建赋值操作符？")]),t._v(" "),v("p",[t._v("类中含有 "),v("code",[t._v("const")]),t._v(" 或引用类型的成员")])]),t._v(" "),v("li",[v("p",[t._v("什么情况下编译器无法创建析构函数？")]),t._v(" "),v("p",[t._v("如果基类的析构函数在 "),v("code",[t._v("private")]),t._v(" 中")])])]),t._v(" "),v("p",[t._v("例子：以下代码有什么问题？")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("class Dog {\n    string& name_;\n};\n\nint main() {\n    Dog dog; \n}\n")])])]),v("p",[t._v("编译错误：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("error: implicit default constructor for 'Dog' must explicitly initialize the reference member\n")])])]),v("p",[t._v("因为默认构造函数在构造 "),v("code",[t._v("name_")]),t._v(" 时，只能构造，而无法初始化，"),v("strong",[t._v("而 C++ 要求引用被初始化，因为引用无法被重复赋值。")])]),t._v(" "),v("p",[t._v("C++11 引入了 "),v("code",[t._v("default")]),t._v(" 关键字，它可以显示的告知编译器，为此类产生默认的成员函数，例如它和默认构造函数一起使用，作用是：即便定义了其他有参构造函数，仍然让编译器为此类产生一个默认构造函数，如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("class Dog {\npublic:\n\tDog() = default; \n\tDog(string name) {...}\n};\nint main() {\n    Dog dog;\n}\n\n----\ng++ -std=c++11 -c dog.cc // it's ok\n")])])]),v("p",[t._v("总结一下：本文介绍了")]),t._v(" "),v("ol",[v("li",[t._v("在 C++03 中，编译器会为类产生哪些默认的成员函数")]),t._v(" "),v("li",[t._v("所有参数都有默认参数的构造函数也是默认构造函数")]),t._v(" "),v("li",[t._v("要使用容器，类需要具备可复制和可赋值构造两个特性")]),t._v(" "),v("li",[t._v("如果类中有 "),v("code",[t._v("const")]),t._v(" 成员和引用类型的成员，则该类无法赋值和赋值构造")]),t._v(" "),v("li",[t._v("如果基类中的析构函数在 "),v("code",[t._v("private")]),t._v(" 中，则编译器不会给子类产生默认析构函数")]),t._v(" "),v("li",[t._v("如果你定义了其他带参构造函数，则编译器不会给你产生默认构造函数，除非你使用 C++11 中的 "),v("code",[t._v("default")]),t._v(" 关键字")])]),t._v(" "),v("p",[t._v("参考：")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.youtube.com/watch?v=KMSYmY74AEs&t=250s",target:"_blank",rel:"noopener noreferrer"}},[t._v("Advanced C++: Compiler Generated Functions"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=_.exports}}]);