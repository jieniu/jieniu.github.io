(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{424:function(t,s,a){"use strict";a.r(s);var e=a(45),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"【译】unix-管道之美"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【译】unix-管道之美"}},[t._v("#")]),t._v(" 【译】Unix 管道之美")]),t._v(" "),a("blockquote",[a("p",[t._v("by Prithu Goswami")]),t._v(" "),a("p",[t._v("原文链接：https://prithu.xyz/posts/unix-pipeline/")])]),t._v(" "),a("p",[t._v("Unix 哲学强调构建简单且可扩展的软件。每一个软件只做一件事情，并把这件事做好。同时该软件还可以通过“文本流”（text stream）和其他软件进行交互，这一点也是让 Unix 如此强大且直观的核心理念之一。")]),t._v(" "),a("p",[t._v("引用 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/The_UNIX_Programming_Environment",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unix 编程环境"),a("OutboundLink")],1),t._v("中的一段内容：")]),t._v(" "),a("blockquote",[a("p",[t._v("尽管 Unix 系统中引入了许多创新的程序和技术，但单个程序或想法并不能让它很好的工作。事实上，让 Unix 更高效的是编程的方法，是一种使用计算机的哲学。虽然这些哲学无法用一句话来描述，但它的核心在于：一个系统的力量更多的来自于程序之间的关系，而不是程序本身。很多孤立的 Unix 程序仅能完成相当简单的工作，但将它们组合起来，就成了通用且好用的工具。")])]),t._v(" "),a("p",[t._v("我想这段话已经解释得很好了。同样，你还可以观看 "),a("a",{attrs:{href:"https://youtu.be/tc4ROCJYbm0?t=297",target:"_blank",rel:"noopener noreferrer"}},[t._v("Brian Kernighan"),a("OutboundLink")],1),t._v(" 解释 Unix 操作系统的基本原理，他还介绍了一个使用管道的例子。")]),t._v(" "),a("p",[t._v("在本文中，我想向大家展示这一理念的几个实例——如何组合不同的 unix 工具来完成一些强大的任务。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("ul",[a("li",[t._v("基于 git 仓库中的提交日志，产生作者的提交排行榜")]),t._v(" "),a("li",[t._v("浏览 "),a("a",{attrs:{href:"https://reddit.com/r/memes",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/meme"),a("OutboundLink")],1),t._v(" 中的表情图片和根据 "),a("a",{attrs:{href:"https://reddit.com/r/earthporn",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/earthporn"),a("OutboundLink")],1),t._v(" 设置你的桌面")]),t._v(" "),a("li",[t._v("随机从 IMDB 中挑选一部影片")])]),t._v(" "),a("h2",{attrs:{id:"例子1-基于-git-仓库中的提交日志-产生作者的提交排行榜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子1-基于-git-仓库中的提交日志-产生作者的提交排行榜"}},[t._v("#")]),t._v(" 例子1 - 基于 git 仓库中的提交日志，产生作者的提交排行榜")]),t._v(" "),a("p",[t._v("我们先从简单的开始 - 打印 git 仓库的作者/贡献者列表，并按照提交次数作降序排序（贡献最多的排在前面）。对于 pipeline 来说，这是个简单的任务。"),a("code",[t._v("git log")]),t._v(" 命令可以打印提交日志，我们可以添加 "),a("code",[t._v("--format=<format>")]),t._v(" 选项来控制想要打印的格式，"),a("code",[t._v("--format='%an'")]),t._v(" 表示仅输出每次提交中作者的名字。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%an'")]),t._v("\nAlice\nBob\nDenise\nDenise\nCandice\nDenise\nAlice\nAlice\nAlice\n")])])]),a("p",[t._v("现在我们使用 "),a("code",[t._v("sort")]),t._v(" 功能将作者按照字母顺序进行排序")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%an'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v("\nAlice\nAlice\nAlice\nAlice\nBob\nCandice\nDenise\nDenise\nDenise\n")])])]),a("p",[t._v("将结果输入到 "),a("code",[t._v("uniq")]),t._v(" 中")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%an'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uniq")]),t._v(" -c\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" Alice\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Bob\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Candice\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" Denise\n")])])]),a("p",[t._v("来看一下 "),a("code",[t._v("uniq")]),t._v(" 的操作手册：")]),t._v(" "),a("blockquote",[a("p",[t._v("uniq - 报告或忽略重复的行")]),t._v(" "),a("p",[t._v("从输入文件或者标准输入中过滤相邻的匹配行并写入到输出文件或标准输出。")])]),t._v(" "),a("p",[t._v("所以 "),a("code",[t._v("uniq")]),t._v(" 会过滤掉重复的行，不过前提是这些重复的行要相邻，这也是为什么我们首先要将数据输入到 "),a("code",[t._v("sort")]),t._v(" 中。"),a("code",[t._v("-c")]),t._v(" 选项会在每行行首展示重复的次数。")]),t._v(" "),a("p",[t._v("你可以看到输出依然是按照字幕顺序排列的，现在剩下的就是按数值进行排序了。"),a("code",[t._v("sort")]),t._v(" 有一个"),a("code",[t._v("-n")]),t._v(" 选项，它会考虑数值排序这件事。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%an'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uniq")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -nr\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" Alice\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" Denise\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Candice\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Bob\n")])])]),a("p",[a("code",[t._v("sort")]),t._v(" 默认会按升序排序，加上 "),a("code",[t._v("-r")]),t._v(" 选项后，便会按照逆序来排序。于是，这就是你想要的 -- 根据提交次数排序的作者榜单。")]),t._v(" "),a("h2",{attrs:{id:"例子-2-浏览-r-meme-中的表情图片和根据-r-earthporn-设置你的桌面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子-2-浏览-r-meme-中的表情图片和根据-r-earthporn-设置你的桌面"}},[t._v("#")]),t._v(" 例子 2 - 浏览 "),a("a",{attrs:{href:"https://reddit.com/r/memes",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/meme"),a("OutboundLink")],1),t._v(" 中的表情图片和根据 "),a("a",{attrs:{href:"https://reddit.com/r/earthporn",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/earthporn"),a("OutboundLink")],1),t._v(" 设置你的桌面")]),t._v(" "),a("p",[t._v('你知道吗，你可以添加 "'),a("code",[t._v(".json")]),t._v('" 到 reddit 的网址尾部，以获得一个 json 响应，而不是通常的 html 页面。这让我们可以做很多事情，其中之一就是直接从命令行浏览表情包（好吧，不完全是，因为实际的图像将显示在GUI程序上）。我们可以简单地通过 curl 或 wget 来获取 -- https://reddit.com/r/memes.json。')]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O - -q "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://reddit.com/r/memes.json'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"kind": "Listing", "data": {"modhash": "xyloiccqgm649f320569f4efb427cdcbd89e68aeceeda8fe1a", "dist": 27, "children":\n[{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "memes",\n"selftext": "More info available at....\'')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nMore lines\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[a("em",[t._v("译者注：国内如不能正常访问，可以使用 proxychains4")])]),t._v(" "),a("p",[t._v('我在这里使用 wget 是因为 Curl User-Agent 似乎得到了不同的处理。显然，你可以通过简单地改变 "User-Agent" 来解决这个问题，但我还是决定用 '),a("code",[t._v("wget")]),t._v("。wget 通过 "),a("code",[t._v("-O")]),t._v(" 选项来获取输出文件名。大多数程序都支持 "),a("code",[t._v("-")]),t._v(" 值，来表示标准输入输出。"),a("code",[t._v("-q")]),t._v(" 选项表示安静的输出，不要打印进度之类的信息。现在我们拿到了一个大 json，为了在命令行中解析和使用这些 JSON 数据，我们可以使用 "),a("code",[t._v("jq")]),t._v("。"),a("code",[t._v("jq")]),t._v(" 可以被认为是 JSON 的 "),a("code",[t._v("sed/awk")]),t._v("，它也是一门简单直观的语言，你可以参考它的操作手册。")]),t._v(" "),a("p",[t._v("返回的 JSON 看上去像这样：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"kind"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Listing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"modhash"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"awe40m26lde06517c260e2071117e208f8c9b5b29e1da12bf7"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dist"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"children"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"after"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3_gi892x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"before"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v('所以我们拿到的响应类型为 "Listing"，从中，我们还可以看到一个 "children" 数组，"children" 数组中的每一个元素表示一个帖子（post），它们看上去像这样：')]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"kind"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"subreddit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"memes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"selftext"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"created"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1589309289")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"author_fullname"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t2_4amm4a5w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"gilded"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Its hard to argue with his assessment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"subreddit_name_prefixed"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r/memes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"downs"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hide_score"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3_gi8wkj"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"quarantine"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"permalink"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/r/memes/comments/gi8wkj/its_hard_to_argue_with_his_assessment/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"url"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/6vi05eobdby41.jpg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"upvote_ratio"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.93")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"subreddit_type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"public"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ups"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11367")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"total_awards_received"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"score"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11367")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"author_premium"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"thumbnail"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://b.thumbs.redditmedia.com/QZt8_SBJDdKLVnXK8P4Wr_02ALEhGoGFEeNhpsyIfvw.jpg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"gildings"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"post_hint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"image"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".................."')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"more lines skipped"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".................."')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面我省掉了 "),a("code",[t._v("data")]),t._v(" 中的一些信息，其中一共有 105 个条目，你可以从中拿到很多有趣的数据，而当前我们只关心 "),a("code",[t._v("url")]),t._v(" 这一项。它不是 reddit 帖子的 url，而是帖子内容的 url。如果你想要的是帖子的 url，就使用 "),a("code",[t._v("permalink")]),t._v("。所以在本例中，"),a("code",[t._v("url")]),t._v(" 字段是表情图片的链接。")]),t._v(" "),a("p",[t._v("我们可以非常简单的就获取其中所有的 urls：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O - -q reddit.com/r/memes.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.data.children[] |.data.url'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.reddit.com/r/memes/comments/g9w9bv/join_the_unofficial_redditmc_minecraft_server_at/"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.reddit.com/r/memes/comments/ggsomm/10_million_subscriber_event/"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.imgur.com/KpwIuSO.png"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/ey1f7ksrtay41.jpg"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/is3cckgbeby41.png"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/4pfwbtqsaby41.jpg"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v('忽略掉前两条链接，那基本上是版主放的贴子，其 "url" 形式和 "permalink" 是一样的。')]),t._v(" "),a("p",[t._v("输入我们之前看到的 JSON 到"),a("code",[t._v("jq")]),t._v(" 中，然后"),a("code",[t._v(".data.children")]),t._v(" 指的是之前提到的帖子数组。"),a("code",[t._v(".data.children[] | .data.url")]),t._v(" 的意思是：\"遍历数组中的每个元素，并打印每个元素的 'data' 字段中的 'url'\"。")]),t._v(" "),a("p",[t._v("所以我们得到了 "),a("a",{attrs:{href:"https://reddit.com/r/memes",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/memes"),a("OutboundLink")],1),t._v(' 中所有 “热门” 帖子的 URLs 列表。如果你想得到本周的 "热门 "帖子，那么你可以输入 https://reddit.com/r/memes/top.json?t=week。想拿到所有时间的热门帖子怎么办？'),a("code",[t._v("t=all")]),t._v("，一年的呢？ "),a("code",[t._v("t=year")]),t._v("，以此类推。")]),t._v(" "),a("p",[t._v("一旦我们有了所有 URL 的列表，我们就可以直接将其导入 "),a("code",[t._v("xargs")]),t._v("。Xargs 是一个非常有用的工具，可以从标准输入中构建命令行。以下是 xarg 手册中的内容：")]),t._v(" "),a("blockquote",[a("p",[t._v("xargs 从标准输入中读取条目（items），它们以空格或换行符来分隔，然后一次或多次的执行命令（默认为 /bin/echo），命令的参数为初始参数加上从标准输入中读取的条目。标准输入的空行将被忽略。")])]),t._v(" "),a("p",[t._v("所以执行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/4pfwbtqsaby41.jpg"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O meme.jpg -q\n")])])]),a("p",[t._v("等价于执行：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O meme.jpg -q "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://i.redd.it/4pfwbtqsaby41.jpg"')]),t._v("\n")])])]),a("p",[t._v("现在我们可将 URL 列表输入到一个图片浏览器，如 "),a("code",[t._v("feh")]),t._v(" 或 "),a("code",[t._v("eog")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O - -q reddit.com/r/memes.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.data.children[] |.data.url'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" feh\n")])])]),a("p",[a("em",[t._v("译者注：无法正常访问的同学可在 feh 前加上 proxychains4")])]),t._v(" "),a("p",[t._v("于是表情图片弹了出来，我可以像在本地磁盘上一样用方向键浏览它们。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://prithu.xyz/posts/unix-pipeline/feh-meme.png",alt:"img"}})]),t._v(" "),a("p",[t._v("或者我可以用 "),a("code",[t._v("wget")]),t._v(" 来替换 "),a("code",[t._v("feh")]),t._v("，然后把这些图片都下载下来。")]),t._v(" "),a("p",[t._v("你可以用它来做任何事情，reddit JSON 数据的另一个用例是：使用热门板块 "),a("a",{attrs:{href:"https://reddit.com/r/earthporn",target:"_blank",rel:"noopener noreferrer"}},[t._v("/r/earthporn"),a("OutboundLink")],1),t._v(" 中点赞数最多的图片来设置你的桌面。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ wget -O - -q reddit.com/r/earthporn.json | jq '.data.children[] |.data.url' | head -1 | xargs feh --bg-fill\n")])])]),a("p",[t._v("如果你愿意的话，你可以把这个设置成每小时运行一次的 cron-job。我在这里使用 "),a("code",[t._v("head")]),t._v(" 命令只打印第一行，也就是被投票最多的帖子。就其本身而言，head似乎做了一些很琐碎、很无用的事情，但在这种情况下，与其他程序一起工作，它就成了一个重要的部分。")]),t._v(" "),a("p",[t._v("你看到 Unix 管道的威力了吗？这一行就完成了从获取 JSON 数据，解析并从中读取相关数据，然后再次根据 URL 获取图片，最后将其设置为壁纸的所有工作。")]),t._v(" "),a("p",[t._v("我用它做的另一件傻事就是每两个小时从 /r/memes 上下载表情包。这在我的机器上被设置为一个 cron job。现在我有大约 19566 个表情，占用了我磁盘的 4.5G 空间。我为什么要这么做？别问我...")]),t._v(" "),a("h2",{attrs:{id:"例子-3-随机从-imdb-中挑选一部影片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子-3-随机从-imdb-中挑选一部影片"}},[t._v("#")]),t._v(" 例子 3 - 随机从 IMDB 中挑选一部影片")]),t._v(" "),a("p",[t._v("最后用一个简单的例子结束吧。IMDb 有一个功能，他们允许你制作电影列表，你也可以找到其他用户制作的列表。例如 - "),a("a",{attrs:{href:"https://www.imdb.com/list/ls020046354",target:"_blank",rel:"noopener noreferrer"}},[t._v("Blow Your Mind Movies"),a("OutboundLink")],1),t._v("。如果你在该网址后面附加一个 "),a("code",[t._v("/export")]),t._v(" ，你将得到该列表的  "),a("code",[t._v(".csv")]),t._v("  格式的输出。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://www.imdb.com/list/ls020046354/export\n\nPosition,Const,Created,Modified,Description,Title,URL,Title Type,IMDb Rating,Runtime "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",Year,Genres,Num Votes,Release Date,Directors\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(",tt0137523,2017-07-30,2017-07-30,,Fight Club,https://www.imdb.com/title/tt0137523/,movie,8.8,139,1999,Drama,1780706,1999-09-10,David Fincher\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(",tt0945513,2017-07-30,2017-07-30,,Source Code,https://www.imdb.com/title/tt0945513/,movie,7.5,93,2011,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action, Drama, Mystery, Sci-Fi, Thriller"')]),t._v(",471234,2011-03-11,Duncan Jones\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(",tt0482571,2017-07-30,2017-07-30,,The Prestige,https://www.imdb.com/title/tt0482571/,movie,8.5,130,2006,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Drama, Mystery, Sci-Fi, Thriller"')]),t._v(",1133548,2006-10-17,Christopher Nolan\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(",tt0209144,2018-01-16,2018-01-16,,Memento,https://www.imdb.com/title/tt0209144/,movie,8.4,113,2000,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mystery, Thriller"')]),t._v(",1081848,2000-09-05,Christopher Nolan\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(",tt0144084,2018-01-16,2018-01-16,,American Psycho,https://www.imdb.com/title/tt0144084/,movie,7.6,101,2000,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Comedy, Crime, Drama"')]),t._v(",462984,2000-01-21,Mary Harron\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(",tt0364569,2018-01-16,2018-01-16,,Oldeuboi,https://www.imdb.com/title/tt0364569/,movie,8.4,120,2003,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action, Drama, Mystery, Thriller"')]),t._v(",491476,2003-11-21,Chan-wook Park\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(",tt1130884,2018-10-08,2018-10-08,,Shutter Island,https://www.imdb.com/title/tt1130884/,movie,8.1,138,2010,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mystery, Thriller"')]),t._v(",1075524,2010-02-13,Martin Scorsese\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(",tt8772262,2019-12-27,2019-12-27,,Midsommar,https://www.imdb.com/title/tt8772262/,movie,7.1,148,2019,"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Drama, Horror, Mystery, Thriller"')]),t._v(",150798,2019-06-24,Ari Aster\n")])])]),a("p",[t._v("使用 "),a("code",[t._v("cut")]),t._v(" 命令输出我们关心的列：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://www.imdb.com/list/ls020046354/export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\nTitle\nFight Club\nSource Code\nThe Prestige\nMemento\nAmerican Psycho\nOldeuboi\nShutter Island\nMidsommar\n")])])]),a("p",[t._v("选项 "),a("code",[t._v("-d")]),t._v(" 用来指定每个字段的分隔符。字段之间用什么分隔？在本例中，它是一个逗号（"),a("code",[t._v(",")]),t._v("）。"),a("code",[t._v("-f")]),t._v(' 选项是你想要打印的字段序号。本例中，第 6 个字段是电影的标题。但这样做字段标题 "Title" 也会被打印出来，所以要删除它，我们可以使用 '),a("code",[t._v("sed '1 d'")]),t._v(" 命令，它的意思是，从输入流中删除第 1 行。")]),t._v(" "),a("p",[t._v("接下来把电影列表输入到 "),a("code",[t._v("shuf")]),t._v(" 中，"),a("code",[t._v("shuf")]),t._v(" 做的事情是将列表随机打乱，然后输出：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://www.imdb.com/list/ls020046354/export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuf")]),t._v("\n\nAmerican Psycho\nMidsommar\nSource Code\nOldeuboi\nFight Club\nMemento\nShutter Island\nThe Prestige\n")])])]),a("p",[t._v("接着把它输入到 "),a("code",[t._v("head -1")]),t._v(" 或 "),a("code",[t._v("sed '1 q'")]),t._v("，仅输出第 1 行。于是每次运行这行命令，你会得到一个随机的电影名")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://www.imdb.com/list/ls020046354/export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -1\n\nSource Code\n")])])]),a("p",[t._v("如果你还想输出电影的详情页链接，没问题，通过 "),a("code",[t._v("--field=LIST")]),t._v(" 选项，"),a("code",[t._v("cut")]),t._v(" 允许你输出列表中的多个字段")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" https://www.imdb.com/list/ls020046354/export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" --field"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6,7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -1\n\nShutter Island,https://www.imdb.com/title/tt1130884/\n")])])]),a("p",[t._v("不过这里还有一个问题，如果电影标题中有逗号，那么你会得到一个完全不同的字段值。解决该问题的一个方法是使用 python 单行代码：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("python "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'import csv,sys;[print (a[\"Title\"]) for a in csv.DictReader(sys.stdin)]'")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s https://www.imdb.com/list/ls020046354/export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    python -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'import csv,sys;[print (a["Title"],a["URL"]) for a in csv.DictReader(sys.stdin)]\'')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -1\n\nOldeuboi https://www.imdb.com/title/tt0364569/ \n")])])]),a("p",[t._v("以上仅仅是几个例子，然而，用一行 shell 命令，可以完成的事情还有很多。")]),t._v(" "),a("p",[t._v("继续查看 Hacker News 上的"),a("a",{attrs:{href:"https://news.ycombinator.com/item?id=23420786",target:"_blank",rel:"noopener noreferrer"}},[t._v("讨论"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=r.exports}}]);