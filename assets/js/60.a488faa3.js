(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{414:function(e,t,a){"use strict";a.r(t);var n=a(45),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"leetcode-9-palindrome-number-题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-9-palindrome-number-题解"}},[e._v("#")]),e._v(" [LeetCode] 9. Palindrome Number 题解")]),e._v(" "),a("h2",{attrs:{id:"问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[e._v("#")]),e._v(" 问题描述")]),e._v(" "),a("p",[e._v("判断某个数是否为回文数字。回文数字的特点是从左到右读这个数，和从右到左读这个数，得到的结果一样。")]),e._v(" "),a("p",[a("strong",[e._v("例 1:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("输入: 121\n返回: true\n")])])]),a("p",[a("strong",[e._v("例 2:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("输入: -121\n返回: false\n解释: 从左到右读为 -121， 但从右到左读为 121-，所以它不是回文。\n")])])]),a("p",[a("strong",[e._v("例 3:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("输入: 10\n输出: false\n解释: 从右到左读为 01，所以它不是回文。\n")])])]),a("h2",{attrs:{id:"问题难度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题难度"}},[e._v("#")]),e._v(" 问题难度")]),e._v(" "),a("p",[a("strong",[a("code",[e._v("Easy")])])]),e._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[e._v("#")]),e._v(" 解题思路")]),e._v(" "),a("p",[e._v("虽然该题为简单难度，但要做对并不容易，我也是提交了好几次才成功，主要问题在于边界条件判断错误。")]),e._v(" "),a("p",[e._v("判断一个数字是否是回文，第一直觉便是将这个数反转，最高位和最低位互换，以此类推，得到的新数和原数比较，如果相等，便可以证明该数是回文。但这里有可能会产生整型溢出的问题，例如在 32 位环境下，2147483647 被完全反转后，得到的数字为 -1126087180 (而不是预期中的 7463847412)。")]),e._v(" "),a("p",[e._v("所以这种方法需要改进。更好的思路是只对一半的位数进行调整，然后和剩下的数进行比较，如果相等，也可以认为它是回文。")]),e._v(" "),a("p",[e._v("例如：123321 这个数，我们将低位到中间位的 321 反转，可以得到 123，和剩下的高位 123 进行比较，它们正好相等。")]),e._v(" "),a("p",[e._v("剩下几个边界条件就比较简单了")]),e._v(" "),a("ul",[a("li",[e._v("负数肯定不是回文")]),e._v(" "),a("li",[e._v("能被 10 整除的数不是回文")])]),e._v(" "),a("p",[e._v("经过以上分析，便可以写代码了：")]),e._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0 || (x > 0 && x % 10 == 0)) {\n            return false;\n        }\n        \n        int num = 0;\n        while (num < x) {\n            num = num * 10 + x % 10;\n            x = x / 10;\n        }\n        \n        if (x == num || num / 10 == x) {\n            return true;\n        }\n          \n        return false;\n    }\n};\n")])])]),a("p",[a("a",{attrs:{href:"https://leetcode.com/problems/palindrome-number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("原题链接"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);