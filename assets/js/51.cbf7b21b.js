(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{405:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"leetcode-1-two-sum-题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-1-two-sum-题解"}},[t._v("#")]),t._v(" [LeetCode] 1. Two Sum 题解")]),t._v(" "),a("h2",{attrs:{id:"问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),a("p",[t._v("给定一个整数数组 "),a("code",[t._v("nums")]),t._v(" 和一个目标数字 "),a("code",[t._v("target")]),t._v("，要求返回数组中两个数字的"),a("strong",[t._v("下标")]),t._v("，且这两个数字加起来等于目标数字 "),a("code",[t._v("target")])]),t._v(" "),a("p",[t._v("你可以假设每组输入将会有一个解决方案，且数组中同一个数字只能使用一次")]),t._v(" "),a("p",[a("strong",[t._v("例子：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入 nums = [2, 7, 11, 15], target = 9,\n因为 nums[0] + nums[1] = 2 + 7 = 9,\n所以 return [0, 1]。\n")])])]),a("h2",{attrs:{id:"问题难度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题难度"}},[t._v("#")]),t._v(" 问题难度")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("Easy")])])]),t._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),a("p",[t._v("期望遍历一遍数组，就可以找到两个符合条件的数字，遍历过程中，每读到一个数字，需要完成两个动作：")]),t._v(" "),a("ol",[a("li",[t._v("查询「补数集合」，判断该数字的「补数」（目标数字减去该数）是否存在，如果存在，则返回补数和该数的下标")]),t._v(" "),a("li",[t._v("如果不存在，那么该数很可能是别的数的「补数」，将该数和下标放入「补数集合」中")])]),t._v(" "),a("p",[t._v("可以看到「补数集合」是这里的关键，它要以尽可能快的速度完成：")]),t._v(" "),a("ol",[a("li",[t._v("查询某个补数是否存在")]),t._v(" "),a("li",[t._v("插入一个补数")])]),t._v(" "),a("p",[t._v("这两个操作。")]),t._v(" "),a("p",[t._v("而我们都知道，对于这种需求，有一种数据结构可以达到 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mn",[t._v("1")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathrm"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 的时间复杂度，那就是哈希表，说到这里，我们就可以动手写代码了：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        complements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" complements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("complements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            complements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n")])])]),a("p",[t._v("以上，"),a("code",[t._v("complements")]),t._v(" 是我们的「补数集合」，在 Python 中，字典（dict）数据结构就是用哈希表实现的，所以这里 "),a("code",[t._v("complements")]),t._v("  就定义为一个字典。")]),t._v(" "),a("p",[t._v("第 4 行我们依次遍历数组")]),t._v(" "),a("p",[t._v("第 5、6 行用来判断当前数的「补数」是否存在，如果存在则返回「补数」所在的下标和当前数的下标")]),t._v(" "),a("p",[t._v("第 7 行是在「补数」不存在的情况下，将当前数作为其他数的「补数」，连同下标一起插入到「补数集合」中")]),t._v(" "),a("p",[t._v("于是，上面代码就实现了通过遍历一次数组，就可以找到符合条件的两个数的下标，时间复杂度为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",[t._v("(")]),a("mi",[t._v("n")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("原题链接"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);