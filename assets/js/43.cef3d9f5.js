(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{402:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"struct-和-class-的约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-和-class-的约定"}},[t._v("#")]),t._v(" Struct 和 Class 的约定")]),t._v(" "),a("p",[t._v("为了降低系统的复杂性，我们需要遵循按约定编程的原则（Coding by convention），旨在：")]),t._v(" "),a("blockquote",[a("p",[t._v("减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。")])]),t._v(" "),a("p",[t._v("C++ 编程也有不少约定，对于 struct 和 class 来说")]),t._v(" "),a("blockquote",[a("p",[t._v("struct 意味着被动的对象（passive objects），它用来保存公有成员，且基本上没有成员函数。")]),t._v(" "),a("p",[t._v("class 是动态的对象（active objects），它用来保存私有成员，你只能通过接口操作 class 对象")])]),t._v(" "),a("p",[t._v("一般对 struct 的命名约定是，在名字后面加后缀 "),a("code",[t._v("_t")]),t._v("，而成员命名没有任何修饰，如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct Person_t {\n    string name; // public\n};\n")])])]),a("p",[t._v("相对来说，class 定义的类名一般不会有任何修饰，而成员名以 "),a("code",[t._v("_")]),t._v(" 下划线结尾，如下")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string name_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// private")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在很久以前，C++ 程序员喜欢在成员前加 "),a("code",[t._v("m_")]),t._v("，如 "),a("code",[t._v("m_name")]),t._v("，不久之后，程序员就想，与其用两个符号来修饰成员名，为什么不只用一个符号呢？而之所以不在成员名前加 "),a("code",[t._v("_")]),t._v(" 前缀，是因为 C++ 编译器和内部实现是使用 "),a("code",[t._v("_")]),t._v(" 或 "),a("code",[t._v("__")]),t._v(" 来标识成员的，于是就有了使用 "),a("code",[t._v("_")]),t._v(" 后缀来修饰成员的约定。")]),t._v(" "),a("p",[t._v("因为 C++ 的封装性，我们不能直接操作 class 中的私有成员，但有时候为了读写它们，我们只能定义 "),a("code",[t._v("setter")]),t._v(" 和 "),a("code",[t._v("getter")]),t._v(" ，如下")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string name_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// private")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getter ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name_ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setter ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("即便如此，我们却依然要避免过多的定义 "),a("code",[t._v("setter")]),t._v(" 和 "),a("code",[t._v("getter")]),t._v(" 函数，因为过多的 "),a("code",[t._v("setter")]),t._v(" 和 "),a("code",[t._v("getter")]),t._v(" 就代表这些成员要被外部直接使用，既然这样，这些成员是否真的属于这个类呢？是不是要重新思考下此处的设计呢？例如将部分成员移到别处，作为其他类的私有成员，同时能减少 "),a("code",[t._v("setter")]),t._v(" 和 "),a("code",[t._v("getter")]),t._v(" 定义。")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("ul",[a("li",[t._v("https://www.youtube.com/watch?v=qJ4Kzk6mnFc")])])])}),[],!1,null,null,null);s.default=n.exports}}]);