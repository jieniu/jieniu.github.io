(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{409:function(t,s,n){"use strict";n.r(s);var e=n(45),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-3-longest-substring-without-repeating-characters-题解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-3-longest-substring-without-repeating-characters-题解"}},[t._v("#")]),t._v(" [LeetCode] 3. Longest Substring Without Repeating Characters 题解")]),t._v(" "),n("h2",{attrs:{id:"问题描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),n("p",[t._v("输入一个字符串，找到其中最长的不重复子串")]),t._v(" "),n("p",[n("strong",[t._v("例1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('输入："abcabcbb"\n输出：3\n解释：最长非重复子串为"abc"\n')])])]),n("p",[n("strong",[t._v("例2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('输入："bbbbb"\n输出：1\n解释：最长非重复子串为"b"\n')])])]),n("p",[n("strong",[t._v("例3：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('输入："pwwkew"\n输出：3\n解释：最长非重复子串为"wke"\n')])])]),n("h2",{attrs:{id:"问题难度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题难度"}},[t._v("#")]),t._v(" 问题难度")]),t._v(" "),n("p",[n("strong",[n("code",[t._v("Medium")])])]),t._v(" "),n("h2",{attrs:{id:"解题思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),n("p",[t._v("本题采用「滑动窗口法」可以达到较理想的时间复杂度 O(n)，滑动窗口指的是当前非重复子串所在的窗口，此滑动窗口有两种操作方法")]),t._v(" "),n("ol",[n("li",[t._v("检查下一个字符是否会重复，如未重复，则将窗口向右扩大")]),t._v(" "),n("li",[t._v("发现重复字符，则将窗口右边界保持不变，左边界右移，以此缩小窗口")])]),t._v(" "),n("p",[t._v("上面的操作比较容易理解，唯一需要注意的是第 2 点中，"),n("strong",[t._v("当发现重复字符时，窗口左边界向右移动几个单位")]),t._v("，我们可以看一个示意图：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("+---------+ \n| a b c d | e d x y z \n+---------+\n \n+-----------+ \n| a b c d e | d x y z // 未发现重复，向右扩大窗口\n+-----------+\n\n        +-----+ \na b c d | e d | x y z // 发现重复，缩小窗口\n        +-----+\n")])])]),n("p",[t._v("假设输入字符串为 "),n("code",[t._v('"abcdedxyz"')]),t._v("，一直到我们遍历到字符 "),n("code",[t._v("e")]),t._v(" 时，均未发现重复的字符串，至此对窗口进行的操作都是向右扩大，当检查到下一个字符 "),n("code",[t._v("d")]),t._v(" 时，由于前面字符串中已经出现过该字符，所以窗口左边界需要进行右移，移动的位置、即新子串窗口的起始点，正好是两个重复字符中、第一个重复字符的右边，如图所示为字符 "),n("code",[t._v("e")]),t._v(" 所在的位置。")]),t._v(" "),n("p",[t._v("至此，我们可以开始写程序了：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthOfLongestSubstring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type s: str\n        :rtype: int\n        """')]),t._v("\n        maxlen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        current_substring "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("\n        current_substring_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        begin_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            stoi "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ord")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" begin_index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" begin_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" current_substring_len\n                current_substring_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" maxlen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" current_substring_len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    maxlen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current_substring_len \n                \n                sub_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" begin_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                begin_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                current_substring_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" sub_len\n\n                current_substring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stoi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current_substring_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" begin_index\n                current_substring_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" maxlen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" current_substring_len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            maxlen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current_substring_len\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" maxlen\n")])])]),n("p",[t._v("以上代码中，"),n("code",[t._v("current_substring")]),t._v(" 是一个缓冲区，用来存放当前子字符串，缓冲区声明为 128 个是为了让数组的下标空间能容纳 128 个 ASCII 字符，即这里用数组的下标来表示字符，这样做的好处是可以很快的知道某个字符是否出现重复，数组的内容我们填的是该字符对应的下标，例如字符串 "),n("code",[t._v('"abcde"')]),t._v(" 填到 "),n("code",[t._v("current_substring")]),t._v(" 中为：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("            index:   0..97  98  99  100 101 ..\n                   +---+---+---+---+---+---+---+\ncurrent_substring: |...| 0 | 1 | 2 | 3 | 4 |...|\n                   +---+---+---+---+---+---+---+\n")])])]),n("p",[t._v("我们用变量 "),n("code",[t._v("begin_index")]),t._v(" 来记录当前窗口在字符串中的起始位置，而 "),n("code",[t._v("current_substring_len")]),t._v(" 用来记录当前窗口的长度。"),n("code",[t._v("for")]),t._v(" 循环是对字符串的遍历。")]),t._v(" "),n("p",[t._v("首先将字符转化为其对应的整数 "),n("code",[t._v("stoi")]),t._v("，检查 "),n("code",[t._v("stoi")]),t._v(" 中的内容是否为空，或其存储的位置是否在窗口的左边，如是则表示该字符在 "),n("code",[t._v("begin_index")]),t._v(" 之后未出现过，非重复子串可以继续累加。")]),t._v(" "),n("p",[t._v("否则表示出现重复，出现重复时，需要将窗口的左边界右移，或者说对新的滑动窗口进行初始化，实际上只需更新 "),n("code",[t._v("begin_index")]),t._v(" 和 "),n("code",[t._v("current_substring_len")]),t._v(" 两个值。")]),t._v(" "),n("p",[t._v("最后，我们需要在每一次窗口改变时，或在结束遍历时，判断当前子字符串的长度是否是最长的，并将最长串存储在 "),n("code",[t._v("maxlen")]),t._v(" 中，作为结果返回。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("原题链接"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);